//ESP32 
#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
//informações do seu wifi
const char* ssid = "XXXXXXXXXXXXXXX";
const char* password = "XXXXXXXXXXX";
int port=9093; //consta a porta http

WebServer server(port); //abre a porta do servidor web

const byte led_gpio = 2; //led ou rele para funcionamento do sistema

//DHT escolha seu modelo
#include "DHT.h"
#define DHTPIN 22
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

//umidade do solo
float asoilmoist=analogRead(32); //escolha uma saida adc do seu esp32(algumas nao funcionam mesmo sendo adc)

void handleRoot() {
  digitalWrite(led_gpio, 1);
  String webtext ;
  int sec = millis() / 1000;
  int min = sec / 60;
  int hr = min / 60;
  // lendo temperatura e umidade na faixa de 250 millisegundos!
  // para tirar uma media da umidade
  float hum = dht.readHumidity();
  // ler em graus ceusius
  float temp = dht.readTemperature();
  //float temp = dht.readtemperature(true);// para leitura em fire....

  // checa se alguma leitura deu erro (para tentar fazer outra).
  if (isnan(hum) || isnan(temp)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  
  //comeca a criacao do hotsite
  webtext="<html>\
  <head>\
    <meta http-equiv='refresh' content='5'/>\
    <title>GROWTRON VERSAO BETA</title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>\
  <body>\
    <h1>GROWTRON VERSAO Beta</h1>\   
    <br>\
    <p>Para medir o Solo, Altos Valores (na faixa de +/-4085) significa solo Seco, valores mais baixos (+/- 3200) significa solo molhado. As leituras do Sensor de solo sao influenciadas pelo teor de umidade do solo e propriedades capacitivas eletricas do solo.</p>\
    <br>\
    <p>Date/Time: <span id='datetime'></span></p><script>var dt = new Date();document.getElementById('datetime').innerHTML = (('0'+dt.getDate()).slice(-2)) +'.'+ (('0'+(dt.getMonth()+1)).slice(-2)) +'.'+ (dt.getFullYear()) +' '+ (('0'+dt.getHours()).slice(-2)) +':'+ (('0'+dt.getMinutes()).slice(-2));</script>\
    <br>\
    <p>Umidade do Solo: "+String(asoilmoist)+"</p>\
    <p>Temperatura: "   +String(temp)+" &#176;C</p>\
    <p>Umidade: "   +String(hum)+" %</p>\
  </body>\
</html>";
  server.send(200, "text/html", webtext);
}

void handleNotFound() {
  digitalWrite(led_gpio, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led_gpio, 0);
  delay(1000);
  digitalWrite(led_gpio, 1);
}

void setup(void) {
  pinMode(led_gpio, OUTPUT);
  digitalWrite(led_gpio, 0);
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");

  // espera por conexao
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  

  if (MDNS.begin("esp32")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);

  server.on("/inline", []() {
    server.send(200, "text/plain", "this works as well");
  });

  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
  dht.begin();
  delay(2000);
}

void loop(void) {
  asoilmoist=0.95*asoilmoist+0.05*analogRead(32);//exponential smoothing of soil moisture
  server.handleClient(); 
}
